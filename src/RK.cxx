/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * File   : RK.cxx                                           *
 * Purpode: Definition of the RK class.                      *
 *                                                           *
 * Author : Arnold Alonso Alvarez                            *
 * Version: 1.1, 01/28/24                                    *
 * Contact: nutty.blood@gmail.com                            *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#include "../include/RK.h"
#include "Functions.cxx"

RK::RK(double R[], double T, double Par[], double H, double T_Max){
  
  ofstream output;
  output.open("Output/datos.dat");
  
  output << "#\ttime";
  for(k = 1; k <= number; k ++){
    output << "\t" << "R[" << k - 1 << "]";
  }
  output << endl; 

  Initialize_vectors();
  Coefficients();

  while(T < T_Max){

    for(k = 1; k <= number; k ++){
      r_Aux[k - 1] = R[k - 1];
    }
    t_Aux = T;

    Dot_F(r_Aux, t_Aux, Par, r_p);
    
    for(k = 1; k <= number; k ++){
      KR[(k - 1)*m + (1 - 1)] = r_p[k - 1];
    }

    for(k = 1; k <= number; k ++){
      Fip[k - 1] = b_ip[0]*KR[(k - 1)*m + (1 - 1)];
      Fiq[k - 1] = b_iq[0]*KR[(k - 1)*m + (1 - 1)];
    }

    for (i = 2; i <= m; i++){
      //sum_{j=1}^{i-1} a_ij k_j-----------------------------------------------
      for(k = 1; k <= number; k ++){
        S_r[k - 1] = 0.0;
      }
      
      for (j = 1; j < i; j++){
        for(k = 1; k <= number; k ++){
          S_r[k - 1] += a_ij[(i - 1)*m + (j - 1)]*KR[(k - 1)*m + (j - 1)];
        }
      }
      //R_Aux = R_{n} + h*sum_{j=1}^{i-1} a_ij k_j-----------------------------
      for(k = 1; k <= number; k ++){
        r_Aux[k - 1] = R[k - 1] + H*S_r[k - 1];
      }
      t_Aux = T + H*c_i[i - 1];

      Dot_F(r_Aux, t_Aux,Par, r_p);
      //K = F(R_Aux)-----------------------------------------------------------
      for(k = 1; k <= number; k ++){
        KR[(k - 1)*m + (i - 1)] = r_p[k - 1];
        Fip[k - 1] += b_ip[i - 1]*KR[(k - 1)*m + (i - 1)];
        Fiq[k - 1] += b_iq[i - 1]*KR[(k - 1)*m + (i - 1)];
      }

    }
    //R_{n+1} = R_{n} + Sum_{i}^{s} b_{i}k_{i}------------------------------- 
    delta = 0.0;
    for(k = 1; k <= number; k ++){
      Eta_p[k - 1] = R[k - 1] + H * Fip[k - 1];
      Eta_q[k - 1] = R[k - 1] + H * Fiq[k - 1];

      delta +=  abs(Eta_p[k - 1] - Eta_q[k - 1])*abs(Eta_p[k - 1] - Eta_q[k - 1]);
    }
    delta = sqrt(delta);

    if(delta <= Tolerance){       
      T += H;
      output << T;
      for(k = 1; k <= number; k ++){
        R[k - 1] = Eta_q[k - 1];
        output << "\t" << R[k - 1];
      }
      output << endl;
      // H_{n+1}
      H = 0.9*H*pow(Tolerance/delta, 1.0/(7.0 + 1.0));
    }
    else{
      // H_{n+1}
      H = 0.9*H*pow(Tolerance/delta, 1.0/7.0);
    }
    
  }
}

void RK::Initialize_vectors(){
  r_p.resize(number, 0.0);
  r_Aux.resize(number, 0.0);
  
  S_r.resize(number, 0.0);
  
  Fip.resize(number, 0.0);
  Eta_p.resize(number, 0.0);

  Fiq.resize(number, 0.0);
  Eta_q.resize(number, 0.0);

  KR.resize(number*m, 0.0);

}

//=============================Butcher matrix definition=============================
void RK::Coefficients(){
  a_ij.resize(m*m, 0.0);
  c_i.resize(m, 0.0);
  b_ip.resize(m, 0.0);
  b_iq.resize(m, 0.0);

  /*
  High order embedded Runge-Kutta formulae, by P.J.Prince and J.R.Dormand, 
  Journal of Computational and Applied Mathematics, vol. 7, 1981, pages 67-75.
  Prince-Dormand 8(7)13M
  */

  //c_i = c_i[i - 1]
  c_i[2 - 1]  = 0.5405405405405405405405405405405405405405405405405405405405405405405405405405405405405e-1;
  c_i[3 - 1]  = 0.8108108108108108108108108108108108108108108108108108108108108108108108108108108108108e-1;
  c_i[4 - 1]  = 0.1216216216216216216216216216216216216216216216216216216216216216216216216216216216216;
  c_i[5 - 1]  = 0.3183030377341139686724090365692916040830089200870551451429972718634092511418324494988;
  c_i[6 - 1]  = 0.3859649122807017543859649122807017543859649122807017543859649122807017543859649122807;
  c_i[7 - 1]  = 0.1517857142857142857142857142857142857142857142857142857142857142857142857142857142857;
  c_i[8 - 1]  = 0.475;
  c_i[9 - 1]  = 0.6117225659834943051823848663230184854043544217633673275385795820121481628908576707350;
  c_i[10 - 1] = 0.6363636363636363636363636363636363636363636363636363636363636363636363636363636363636;
  c_i[11 - 1] = 0.9434356004659434970327491792489511700022532816213955305356333171567919752537138965704;
  c_i[12 - 1] = 1.0;
  c_i[13 - 1] = 1.0;

  //a_ij = a_ij[(i - 1)*m + (j - 1)]
  a_ij[(2 - 1)*m + (1 - 1)]   = 0.5405405405405405405405405405405405405405405405405405405405405405405405405405405405405e-1;
  a_ij[(3 - 1)*m + (1 - 1)]   = 0.2027027027027027027027027027027027027027027027027027027027027027027027027027027027027e-1;
  a_ij[(3 - 1)*m + (2 - 1)]   = 0.6081081081081081081081081081081081081081081081081081081081081081081081081081081081081e-1;
  a_ij[(4 - 1)*m + (1 - 1)]   = 0.3040540540540540540540540540540540540540540540540540540540540540540540540540540540541e-1;
  a_ij[(4 - 1)*m + (2 - 1)]   = 0.0;
  a_ij[(4 - 1)*m + (3 - 1)]   = 0.9121621621621621621621621621621621621621621621621621621621621621621621621621621621622e-1;
  a_ij[(5 - 1)*m + (1 - 1)]   = 0.3671023701327416148557526909609206674914148017689095471657324749928154398908375505259;
  a_ij[(5 - 1)*m + (2 - 1)]   = 0.0;
  a_ij[(5 - 1)*m + (3 - 1)]   = -1.395972157775315237599668040515152122139559174731237762925848947197910517352075758967;
  a_ij[(5 - 1)*m + (4 - 1)]   = 1.347172825376687591416324386123523058731153293049383360903113744068504328603070657939;
  a_ij[(6 - 1)*m + (1 - 1)]   = 0.3460690272429825495262405011254287780920051953468580575052275166869314047150600075185e-1;
  a_ij[(6 - 1)*m + (2 - 1)]   = 0.0;
  a_ij[(6 - 1)*m + (3 - 1)]   = 0.0;
  a_ij[(6 - 1)*m + (4 - 1)]   = 0.1899206633570583930697880114328417499207342564966771445384456639731879517957658404494;
  a_ij[(6 - 1)*m + (5 - 1)]   = 0.1614373461993451063635528507353171266560301362493388040969964966388206621186930710794;
  a_ij[(7 - 1)*m + (1 - 1)]   = 0.4658399599013534294817378889729489665700117303166623268866235170080062648580260335506e-1;
  a_ij[(7 - 1)*m + (2 - 1)]   = 0.0;
  a_ij[(7 - 1)*m + (3 - 1)]   = 0.0;
  a_ij[(7 - 1)*m + (4 - 1)]   = 0.1149672463050604754534175937153461639424814203152291744132897915870102447453052647860;
  a_ij[(7 - 1)*m + (5 - 1)]   = -0.1930333399606567912985683409467016553975528950890188773781750316101581513648972999135e-1;
  a_ij[(7 - 1)*m + (6 - 1)]   = 0.9537805986584146442551165767743390654558410447720766350151074158919229619667576135963e-2;
  a_ij[(8 - 1)*m + (1 - 1)]   = 0.2585076102276712255477065221097027684799283013871551250819027480643454978966617419759e-1;
  a_ij[(8 - 1)*m + (2 - 1)]   = 0.0;
  a_ij[(8 - 1)*m + (3 - 1)]   = 0.0;
  a_ij[(8 - 1)*m + (4 - 1)]   = 0.1986897578898483270173580816688195835149802355638014667646282168599024814138477128915;
  a_ij[(8 - 1)*m + (5 - 1)]   = 0.1885002652325153847231772972737826140829187532074024976771418166625137805232369874962e-1;
  a_ij[(8 - 1)*m + (6 - 1)]   = 0.2028041032354403142526746628801142751438438608509523103645514382579491264629503640179;
  a_ij[(8 - 1)*m + (7 - 1)]   = 0.2880535132869269770287887351271760308489119812579046059491588840946246428121205014336e-1;
  a_ij[(9 - 1)*m + (1 - 1)]   = 0.1611476464270880003158850173599399283659565181097475482471884833290782402751984565690;
  a_ij[(9 - 1)*m + (2 - 1)]   = 0.0;
  a_ij[(9 - 1)*m + (3 - 1)]   = 0.0;
  a_ij[(9 - 1)*m + (4 - 1)]   = -1.587093155589858747746446212808328172342719293750028612128965166814246425344751568778;
  a_ij[(9 - 1)*m + (5 - 1)]   = -0.2979784130212898537969088225349295298775054430399699575474640118937685077481234914487;
  a_ij[(9 - 1)*m + (6 - 1)]   = -0.3155975115088206865926745534392989121290997305235347960941501522113499440340074765983e-1;
  a_ij[(9 - 1)*m + (7 - 1)]   = 1.971656294601530739813582553470305395112620768308326205574337686493855096616972983402;
  a_ij[(9 - 1)*m + (8 - 1)]   = 0.3955499447169062352555397861799607553589118451876456230028976061183647534949620386500;
  a_ij[(10 - 1)*m + (1 - 1)]  = 0.2015663906954517827924169071715371973926336526290565517788897905841841216178254077679;
  a_ij[(10 - 1)*m + (2 - 1)]  = 0.0;
  a_ij[(10 - 1)*m + (3 - 1)]  = 0.0;
  a_ij[(10 - 1)*m + (4 - 1)]  = -2.076303769941969897734266786530439591603571372722624247523076072644675251832240523689;
  a_ij[(10 - 1)*m + (5 - 1)]  = -0.3401005619978342363555251822613787962445973804646617472217422437638703673640187729926;
  a_ij[(10 - 1)*m + (6 - 1)]  = -0.1225771783101082168588962387251540700823490374242007323939779605080819437613873730525;
  a_ij[(10 - 1)*m + (7 - 1)]  = 2.488245343359343510326789004133346701418280283415269003486368447533455154470120966501;
  a_ij[(10 - 1)*m + (8 - 1)]  = 0.4690047987640458340540371914036973940728974520558425952203119923192989975845217698194;
  a_ij[(10 - 1)*m + (9 - 1)]  = 0.1652861379470758741180874117202752868307003887495494028958968284332565292154216200907e-1;
  a_ij[(11 - 1)*m + (1 - 1)]  = -1.897249228268723126426397180862655683818372446889200063198018240497586581781082666135;
  a_ij[(11 - 1)*m + (2 - 1)]  = 0.0;
  a_ij[(11 - 1)*m + (3 - 1)]  = 0.0;
  a_ij[(11 - 1)*m + (4 - 1)]  = 20.85029383438481715802878134765897743230810169519054673150783250237787259065160628277;
  a_ij[(11 - 1)*m + (5 - 1)]  = 1.544339862498990047249293680918414512679606994026298230684319927749472715155903044884;
  a_ij[(11 - 1)*m + (6 - 1)]  = -3.908973492818382016371834762893253872337186067348037382383225877251298525390484624519;
  a_ij[(11 - 1)*m + (7 - 1)]  = -20.67359341611644253278039361183996659423524750510209650800858852972787360505823069663;
  a_ij[(11 - 1)*m + (8 - 1)]  = 11.54656249076380489318137755158100821752853375317517380896567154964248746310603721716;
  a_ij[(11 - 1)*m + (9 - 1)]  = -29.52262793013222162626896477481290109523663099084452326264295139159962536069058023591;
  a_ij[(11 - 1)*m + (10 - 1)] = 23.00468348015410070042088692949932825311344784941323397561059337646334327926054557495;
  a_ij[(12 - 1)*m + (1 - 1)]  = 1.305777921446778403896271663337508206403268277289023481082147913305918351365795199218;
  a_ij[(12 - 1)*m + (2 - 1)]  = 0.0;
  a_ij[(12 - 1)*m + (3 - 1)]  = 0.0;
  a_ij[(12 - 1)*m + (4 - 1)]  = -14.96462692984947573164526822671184861388233684517466010028722848927344076818348437227;
  a_ij[(12 - 1)*m + (5 - 1)]  = -1.246906639836084789756171048485975644386355898232215986823801996881293157479297123521;
  a_ij[(12 - 1)*m + (6 - 1)]  = -2.488819824512553531295558695698125218012490435084333661330017491182461420376031225035;
  a_ij[(12 - 1)*m + (7 - 1)]  = 15.92341372375681200938326901986161197627286984512505480228406256201816873170577881716;
  a_ij[(12 - 1)*m + (8 - 1)]  = 2.806775546461244224265428705353662189219833434186667860926360180007532724273016609142;
  a_ij[(12 - 1)*m + (9 - 1)]  = -4.291385809184367026975457880306349741874487497451657457589433257034500132859828781169;
  a_ij[(12 - 1)*m + (10 - 1)] = 3.841217571439613065731705901030298210569019367838756665648624453615951704417917158354;
  a_ij[(12 - 1)*m + (11 - 1)] = 0.1145544402780333763957805616192186356906797515033643960892861254241239671361337181191;
  a_ij[(13 - 1)*m + (1 - 1)]  = 2.291910020982381490703017103301227886278179102551383371171613218008503004963505053002;
  a_ij[(13 - 1)*m + (2 - 1)]  = 0.0;
  a_ij[(13 - 1)*m + (3 - 1)]  = 0.0;
  a_ij[(13 - 1)*m + (4 - 1)]  = -25.27057455792285205193317799355495644053824620319623930267666459358343599006051660213;
  a_ij[(13 - 1)*m + (5 - 1)]  = -1.955967142402501301180372708873731618188368235418975650791548633464915701319984435374;
  a_ij[(13 - 1)*m + (6 - 1)]  = 0.4024922725872925758192848211971775448214124407788145603057256725188091394054243314282e-1;
  a_ij[(13 - 1)*m + (7 - 1)]  = 26.13964564835776332161101732733126554363249527309474510402631698255266494847319085481;
  a_ij[(13 - 1)*m + (8 - 1)]  = -3.615882988674772025456841096076614417333106300447842776105663106236745966649548454913;
  a_ij[(13 - 1)*m + (9 - 1)]  = 10.62468485286290805383023361602767792173043833992561088690920121156565008074016430625;
  a_ij[(13 - 1)*m + (10 - 1)] = -7.408058681771399067672894813127643517007584439198615570119893687077337223075560002671;
  a_ij[(13 - 1)*m + (11 - 1)] = 0.1539936213097423225170900828530568869440512186120524815560660409837359329882068478882;
  a_ij[(13 - 1)*m + (12 - 1)] = 0.0;

  //b_i = b_i[i - 1]
  b_iq[1 - 1]  = 0.4291605240700781507143988938317269408198766712424547188218590475521246390980140787487e-1;
  b_iq[2 - 1]  = 0.0;
  b_iq[3 - 1]  = 0.0;
  b_iq[4 - 1]  = 0.0;
  b_iq[5 - 1]  = 0.0;
  b_iq[6 - 1]  = -0.7026198155628613844968614533252819215242890395491316974533046047568480619736341277627e-1;
  b_iq[7 - 1]  = 0.2466686024581284783947219193297469805861873178849917561643526305107121765406121812281;
  b_iq[8 - 1]  = 0.7023383493764024474713026706791966521163207047117187375744715002839801895816721924616;
  b_iq[9 - 1]  = -2.413675774116385360701995348772388011760036317326687593860260070705546422875255840156;
  b_iq[10 - 1] = 2.338535890458838082517847117189940321564471343260348904617404450455664956551636060796;
  b_iq[11 - 1] = 0.1603650439732572363170523440785968361878842172676395066594873946367658023169575582554;
  b_iq[12 - 1] = -0.2568861830009625606206824465557372806243860289673436132923113494611043598280601476842;
  b_iq[13 - 1] = 0.25;

  //b_iq = b_iq[i - 1]
  b_ip[1 - 1]  = 0.2955321367635349698196488311203224657733277925009198076731622388624965866492863628737e-1;
  b_ip[2 - 1]  = 0.0;
  b_ip[3 - 1]  = 0.0;
  b_ip[4 - 1]  = 0.0;
  b_ip[5 - 1]  = 0.0;
  b_ip[6 - 1]  = -0.8286062764877970397668056126887191847354037544018122961965538027330129339209559093501;
  b_ip[7 - 1]  = 0.3112409000511183279299137516268570512897363217826855582698888340873138124416908811814;
  b_ip[8 - 1]  = 2.467345190599886981964685704068761458562259575475834628418174165533324998199993514039;
  b_ip[9 - 1]  = -2.546941651841908739127380075415708961780905163114681004322493329883513805107784462867;
  b_ip[10 - 1] = 1.443548583676775240301874950690104268511068010189240811834537552274685797398657155566;
  b_ip[11 - 1] = 0.7941559588112728727130195416222867713146778637419587678468591239050802787902574069868e-1;
  b_ip[12 - 1] = 0.4444444444444444444444444444444444444444444444444444444444444444444444444444444444444e-1;
  b_ip[13 - 1] = 0.0;

}

RK::~RK(){

}
